version: 2.1

parameters:
  cache-generation:
    type: integer
    default: 2

orbs:
  win: circleci/windows@5.0
  codecov: codecov/codecov@3

environment:
  PIP_PROGRESS_BAR: 'off'

jobs:
  test-linux:
    parameters:
      python-version:
        type: string
      dependency-specifiers:
        type: string
      integration-test-python-version:
        type: string

    docker:
      - image: python:<< parameters.python-version >>

    steps:
      - checkout

      - run:
          name: create virtual env and install dependencies
          command: |
            python -V
            python -m venv env
            . env/bin/activate
            pip install -U pip setuptools
            pip install -r requirements.txt -r tests/requirements.txt

      - run: &run-python-tests
          name: run unittests
          command: |
            . env/bin/activate
            if [[ << parameters.integration-test-python-version >> != << parameters.python-version >> ]]; then
              export SKIP_INT_TESTS=1
            fi
            coverage run -m unittest discover
            coverage xml

      - run:
          name: create virtual env and install latest dependencies
          command: |
            rm -rf env/
            python -V
            python -m venv env
            . env/bin/activate
            pip install -U pip setuptools
            pip install -r tests/requirements.txt
            pip install .

      - when:
          condition: << parameters.dependency-specifiers >>
          steps:
            - run:
                name: sweep dependencies
                command: |
                  . env/bin/activate
                  pip install << parameters.dependency-specifiers >>

      - run: *run-python-tests

      - codecov/upload: &upload-python-code-coverage
          file: coverage.xml

  test-doctest:
    docker:
      - image: python:3.12

    steps:
      - checkout

      - run:
          name: create virtual env and install dependencies
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt -r docs/requirements.txt

      - run:
          name: doctest
          command: |
            . env/bin/activate
            make -C docs/ html doctest

      - run: 
          name: linkcheck
          command: |
            . env/bin/activate
            make -C docs/ linkcheck

  test-osx:
    parameters:
      python-version:
        type: string
      integration-test-python-version:
        type: string
      xcode:
        type: string
        default: "16.0.0"

    macos:
      xcode: << parameters.xcode >>

    steps:
      - checkout

      - restore_cache: &restore-cache-pyenv
          key: &brew-pyenv-cache-key v<< pipeline.parameters.cache-generation >>-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>

      - run:
          name: install pyenv
          command: |
            brew install pyenv

      - run:
          name: install python
          command: |
            pyenv install << parameters.python-version>> -s

      - save_cache: &save-cache-pyenv
          key: *brew-pyenv-cache-key
          paths:
            - /Users/distiller/Library/Caches/Homebrew
            - /usr/local/Homebrew
            - ~/.pyenv

      - run:
          name: create virtual env and install dependencies
          command: |
            eval "$(pyenv init --path 2>/dev/null || true)"
            eval "$(pyenv init -)"
            pyenv shell << parameters.python-version >>
            python -V
            python -m venv env
            . env/bin/activate
            pip install -U pip
            pip install -r requirements.txt -r tests/requirements.txt

      - run: *run-python-tests

  test-windows:
    parameters:
      python-version:
        type: string

    executor:
      name: win/default

    steps:
      - checkout

      - run:
          name: Install python and create virtualenv
          shell: bash -eo pipefail
          command: |
            # resolve python MAJOR.MINOR version to latest MAJOR.MINOR.PATCH version available on NuGet
            full_version=$(
              curl -s 'https://azuresearch-usnc.nuget.org/query?q=python' \
              | jq -r '.data[] | select(.id == "python") .versions[] | .version' \
              | awk -F. -v ver='<< parameters.python-version >>' \
                  'index($0, ver".") == 1 && $3 >= m { m = $3; v = $0 } END { print v }'
            )
            nuget install python -Version "$full_version" -ExcludeVersion
            python/tools/python -V
            python/tools/python -m venv env

      - run:
          name: Install requirements and the package
          command: |
            env\Scripts\activate.ps1
            pip install -U pip
            pip install -r requirements.txt -r tests\requirements.txt

      - run:
          name: Run tests
          command: |
            env\Scripts\activate.ps1
            coverage run -m unittest discover

  deploy:
    docker:
      - image: python:3.12

    steps:
      - checkout

      - run:
          name: create virtual env and install dependencies
          command: |
            python -m virtualenv env
            . env/bin/activate
            pip install -r requirements.txt
            pip install twine wheel setuptools

      - run:
          name: verify version matches tag
          command: |
            . env/bin/activate
            [[ "$(pip show dwave-system 2>/dev/null | grep Version)" == "Version: $CIRCLE_TAG" ]]

      - run:
          name: build sdist and bdist
          command: |
            . env/bin/activate
            python setup.py sdist bdist_wheel

      - run:
          name: upload
          command: |
            . env/bin/activate
            twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD --skip-existing ./dist/*

workflows:
  test:
    jobs:
      - test-linux:
          name: test-linux-<< matrix.python-version >> | << matrix.dependency-specifiers >>
          matrix:
            parameters:
              python-version: &python-versions ["3.9", "3.10", "3.11", "3.12", &latest-python "3.13"]
              dependency-specifiers:
                - "dwave-cloud-client~=0.12.0"
                - "dwave-cloud-client~=0.13.0"
              integration-test-python-version: &integration-python-versions [*latest-python]
            exclude:
              - python-version: "3.13"
                dependency-specifiers: "dwave-cloud-client~=0.12.0"
                integration-test-python-version: "3.13"

      - test-osx:
          name: test-osx-<< matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
              integration-test-python-version: *integration-python-versions

      - test-windows:
          name: test-windows-<< matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions

      - test-doctest

  deploy:
    jobs:
      - deploy:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
